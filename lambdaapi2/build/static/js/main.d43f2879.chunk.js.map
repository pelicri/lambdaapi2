{"version":3,"sources":["Componentes/CInstancias.jsx","Instancias.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CInstancias","props","Fragment","nome","status","Button","variant","color","url","XMLHttpRequest","Instancias","state","multiplo","value","name","selecionado","instanciasAWS","optiontab","i","length","handleChange","e","setState","target","console","log","regiaoslc","options","method","headers","fetch","then","resp","json","body","InstanceStatuses","className","onSubmit","this","envioAssincrono","onChange","map","key","ist","idx","InstanceId","InstanceState","Name","InstanceIdx","type","style","fontSize","Component","App","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d43f2879.chunk.js","sourcesContent":["import React from \"react\"\nimport {Fragment} from 'react'\nimport { Button } from 'reactstrap';\n\n//Componente Funcional ou STATELESS\nconst CInstancias = (props) => {\n\nreturn <React.Fragment ><div><p>Instancia: {props.nome} |    \n             Status: {props.status} \n             \n             <Button variant=\"outlined\" color=\"primary\">\n                     On/Off\n            </Button></p>\n             </div></React.Fragment>\n\n}\nexport default CInstancias;","import React, {Component} from 'react';\nimport {Select} from 'react';\nimport CInstancias from './Componentes/CInstancias.jsx'\n\nconst Http = new XMLHttpRequest();\nconst url='https://gxgurg4n08.execute-api.us-east-1.amazonaws.com/dev/ec2';\n\nclass Instancias extends Component {\n    state = {\n        multiplo : [\n            { value: 'regiao', name: 'Região' },\n            { value: 'us-east-1', name: 'us-east-1 - Norte Virgínia' },\n            { value: 'us-east-2', name: 'us-east-2 - Ohio' },\n            { value: 'us-west-1', name: 'us-west-1 - Norte Califórnia' },\n            { value: 'us-west-2', name: 'us-west-2 - Oregon' },\n\n            { value: 'ap-east-1', name: 'ap-east-1 - Hong Kong' },\n            { value: 'ap-south-1', name: 'ap-south-1 - Mumbai' },\n            { value: 'ap-northeast-2', name: 'ap-northeast-1 - Seul' },\n            { value: 'ap-southeast-2', name: 'ap-southeast-2 - Cingapura' },\n            { value: 'ap-northeast-1', name: 'ap-northeast-1 - Tóquio' },\n            { value: 'ap-southeast-1', name: 'ap-southeast-1 - Cingapura' },\n\n            { value: 'sa-east-1', name: 'sa-east-1 - São Paulo' }\n        ],\n        selecionado: \"cris\",\n        instanciasAWS: null\n        \n    }\n\n    optiontab = () => {\n        for(let i = 0; i < this.multiplo.length; i++){\n           return <option value={this.multiplo}>{this.multiplo}</option>   \n          }\n    }\n\n    //evento de seleção de Região da AWS e request de instâncias\n    handleChange = e => {\n        this.setState({selecionado: e.target.value})\n        console.log(this.state.regiaoslc)\n\n        switch (e.target.value) {\n            //chamada da API para criação do Bucket\n            case \"us-east-1\" :\n            case \"us-east-2\" :\n            case \"us-west-1\" :\n            case \"us-west-2\" :\n            case \"ap-east-1\" :\n            case \"ap-east-2\" :\n            case \"ap-northeast-2\" :\n            case \"ap-southeast-2\" :\n            case \"ap-northeast-1\" :\n            case \"ap-southeast-1\" :\n            case \"sa-east-1\":\n\n            //configuração da variável option usada na chamada de API Fetch\n                const options ={\n                    method: \"GET\",\n                    headers: {\"regiao\" : e.target.value}\n                }\n                \n                fetch(url, options)\n                    .then(resp => resp.json())\n                    .then(json => {\n                        this.setState({instanciasAWS:json.body.InstanceStatuses})\n                    })\n                break;\n            }\n    }\n\n\n    render() {\n        return (\n        <form className=\"enviar\"\n        onSubmit={this.envioAssincrono}>\n\n        <div className=\"container\">\n            <div className=\"row\">\n            <div className=\"col-md-4\"></div>\n            <div className=\"col-md-4\">\n\n                <select name=\"regiao\" \n                        value={this.state.selecionado} \n                        onChange={e => this.handleChange(e)}>\n                \n                {this.state.multiplo.map((e, key) => {\n                    return <option key={key} value={e.value}>{e.name}</option>;\n                })}\n\n            </select>\n            \n            </div>\n            <div className=\"col-md-4\"></div>\n            </div>\n            \n            { this.state.instanciasAWS ?\n            <div>\n            {this.state.instanciasAWS.map((ist, idx )=> {        \n                return <CInstancias nome={ist.InstanceId} status={ist.InstanceState.Name} \n                                    key={ist.InstanceIdx}  /> \n            })}  </div> :  null }   \n        </div>\n                <input type=\"submit\" \n                className=\"btn\"\n                style={{fontSize: '19px'}} />           \n        </form>\n    )}\n\n}\nexport default Instancias","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Instancias from './Instancias';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          App React Native - Lista de Instancias EC2 por região.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"http://www.linkedin.com/in/cristianopelizzari\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Linkedin - Cristiano Pelizzari de Andrade\n        </a>\n        <span>\n            \n            <Instancias/>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}